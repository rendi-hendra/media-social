generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id         Int            @id @default(autoincrement())
  username   String         @unique @db.VarChar(20)
  bio        String?        @db.VarChar(255)
  name       String         @db.VarChar(30)
  email      String         @unique @db.VarChar(100)
  password   String         @db.VarChar(255)
  image      String?        @db.VarChar
  token      String?        @db.VarChar
  createdAt  DateTime       @default(now()) @db.Timestamptz()
  followers  Follow[]       @relation("FollowerRelation")
  followings Follow[]       @relation("FollowingRelation")
  like       Like[]
  comments   Comment[]
  actor      Notification[] @relation("ActorRelation")
  user       Notification[] @relation("UserRelation")
  posts      Post[]
  membership Membership[]
  transaction Transaction[]

  @@map("users")
}

model Post {
  id            String         @id @default(cuid())
  userId        Int            @db.Integer 
  title         String         @db.VarChar(100)
  slug          String         @unique @db.VarChar(255)
  image         String         @db.VarChar
  description   String         @db.VarChar(500)
  createdAt     DateTime       @default(now()) @db.Timestamptz()
  like          Like[]
  comments      Comment[]
  notifications Notification[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  userId    Int
  postId    String
  content   String   @db.VarChar(500)
  createdAt DateTime @default(now()) @db.Timestamptz()
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  followerId  Int
  followingId Int
  status      Status @default(PENDING)
  follower    User   @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@map("follows")
}

model Notification {
  id        String   @id @default(cuid())
  userId    Int
  postId    String
  actorId   Int
  type      Type
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz()
  actor     User     @relation("ActorRelation", fields: [actorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Like {
  userId Int
  postId String
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("likes")
}

model Membership {
  id String @id @default(cuid())
  userId Int @unique
  amount Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz()
  transaction Transaction[]

  @@map("memberships")
}

model Transaction {
  orderId    String   @unique
  membershipId String
  userId     Int
  status     Status @default(PENDING)
  createdAt  DateTime @default(now()) @db.Timestamptz()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  membership Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

 @@id([membershipId, userId])

  @@map("transactions")
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
  SETTLEMENT
  EXPIRED
}

enum Type {
  FOLLOW
  COMMENT
  LIKE
}
