// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  email String @db.VarChar(255) @unique
  password String @db.VarChar(255)
  image String @db.VarChar()
  token String @db.VarChar()
  createdAt DateTime @db.Timestamp()

  followers Follow[] @relation("FollowerRelation")
  followings Follow[] @relation("FollowingRelation")

  posts Post[]
  comments Comment[]

  @@map("users")
}


model Post {
  id Int @id @default(autoincrement())
  userId Int @db.Integer()
  slug String @db.VarChar(255) @unique
  image String @db.VarChar()
  description String @db.VarChar(500)
  createdAt DateTime @db.Timestamp()

  comments Comment[]

  user User @relation(fields: [userId], references: [id])

  @@map("posts")
}

model Comment {
  id Int @id @default(autoincrement())
  userId Int @db.Integer()
  postId Int @db.Integer()
  content String @db.VarChar(500)
  createdAt DateTime @db.Timestamp()

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("comments") 
}

model Follow {
  followerId Int
  followingId Int
  status Status @default(PENDING)

  follower User @relation("FollowerRelation", fields: [followerId], references: [id])
  following User @relation("FollowingRelation", fields: [followingId], references: [id])


  @@id([followerId, followingId])

  @@map("Follows")
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}
